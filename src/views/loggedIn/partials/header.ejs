<!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<!-- Google Fonts -->
<link href="https://fonts.googleapis.com/css?family=Roboto&display=swap" rel="stylesheet">
<link href="https://fonts.googleapis.com/css?family=PT+Sans|Roboto&display=swap" rel="stylesheet">

<!-- Font Awesome -->
<script src="https://kit.fontawesome.com/81416c8099.js" crossorigin="anonymous"></script>

<!-- Bootstrap CSS -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<link rel="stylesheet" href="/assets/css/primary-button.css">
<link rel="stylesheet" href="/assets/css/font-families.css">
<link rel="stylesheet" href="/assets/css/navbar.css">

<!-- Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

<!-- Axios -->
<script src="https://unpkg.com/axios/dist/axios.min.js"></script>

<!-- Scripts -->

<script src="/socket.io/socket.io.js"></script>
<script>
  var socket = io();
  socket.on('received deletion friend request', function(sender) {
    $(`#friendRequestFrom${sender}`).remove();
    if ($(`#receivedRequestFrom${sender}`).length) {
      $(`#receivedRequestFrom${sender}`).css('display', 'none')
      $(`#addFriendButtonFor${sender}`).css('display', 'block')
    }
    
  })
  socket.on('received friend request', function(sender, senderAvatarURL) {
    // alert(`${sender} sent you a friend request`)
    const numOfNoti = Number($('#friendsNotiBadge').text())
    $('#friendsNotiBadge').text(numOfNoti + 1)
    $('#friendsNotiBadge').show();
    $('#friendsRequestNotiMenu').prepend(
      `
      <div id="friendRequestFrom${sender}" class="container-fluid" style="background-color: whitesmoke; padding-top:9px">
        <div class="row align-items-center">
          <div class="col text-left">
            <img src="${senderAvatarURL}" style="border-radius: 50%" width="40" height="40"> 
            <span style="font-size: 14px">
              <strong class="brandColor">${sender}</strong>
            </span>
          </div>
          <div class="col text-right" style=" vertical-align: middle">
            <button onclick="acceptRequestFrom('${sender}')" class="btn btn-success" style="font-size: 12px; height: 0.75cm;">Accept</button>
            <button onclick="ignoreRequestFrom('${sender}')" class="btn btn-outline-danger" style="font-size: 12px; height: 0.75cm;">Ignore</button>
          </div>
        </div>
        <div class="dropdown-divider"></div>
      </div>
      `
    )

    const time = Date.now();
    $('#toastsNoti').append(

      `<div id="${time}" class="toast ml-auto" role="alert" data-delay="3000" data-autohide="true">
          <div class="toast-header">
              <strong class="mr-auto text-primary">Friend Request</strong>
              <small class="text-muted">just now</small>
              <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                  <span aria-hidden="true">×</span>
              </button>
          </div>
          <div class="toast-body">
              <img src="${senderAvatarURL}" style="border-radius: 50%" width="30" height="30"> 
              <span style="font-size: 14px">
                <strong class="brandColor">${sender}</strong>
                sent you a friend request
              </span>
          </div>
      </div>
      `
    )
    $(`#${time}`).toast('show')

    if ($(`#receivedRequestFrom${sender}`).length) {
      $(`#receivedRequestFrom${sender}`).css('display', 'block')
      $(`#addFriendButtonFor${sender}`).css('display', 'none')
    }

  })

  socket.on('received ignore friend request', function(sender) {
    if ($(`#requestSentButtonFor${sender}`).length) {
      $(`#requestSentButtonFor${sender}`).css('display', 'none');
      $(`#addFriendButtonFor${sender}`).css('display', 'block');
    }
  })

  socket.on('received accept friend request', function(sender, senderAvatarURL) {
    if ($(`#requestSentButtonFor${sender}`).length) {
      $(`#requestSentButtonFor${sender}`).css('display', 'none');
      $(`#friendsWith${sender}`).css('display', 'block');

      const time = Date.now();
      $('#toastsNoti').append(

        `<div id="${time}" class="toast ml-auto" role="alert" data-delay="3000" data-autohide="true">
            <div class="toast-header">
                <strong class="mr-auto text-primary">Friendship</strong>
                <small class="text-muted">just now</small>
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="toast-body">
                <img src="${senderAvatarURL}" style="border-radius: 50%" width="30" height="30"> 
                <span style="font-size: 14px">
                  <strong class="brandColor">${sender}</strong>
                  and you are now friends on Achilles
                </span>
            </div>
        </div>
        `
      )
      $(`#${time}`).toast('show')
    }
  });

  socket.on('received unfriend', function(sender) {
    if ($(`#friendsWith${sender}`).length) {
      $(`#friendsWith${sender}`).css('display', 'none');
      $(`#addFriendButtonFor${sender}`).css('display', 'block')
    }
  })
</script>

<script type="text/javascript">

  function acceptRequestFrom(sender) {
    axios.post(`/account/accept-friend-request`, {
      sender
    }).then(() => {
      $(`#friendRequestFrom${sender}`).remove();
      if ($(`#friendsWith${sender}`).length) {
        $(`#receivedRequestFrom${sender}`).css('display', 'none')
        $(`#friendsWith${sender}`).css('display', 'block');
      }
      socket.emit('accept friend request', sender)
    });
  }

  function ignoreRequestFrom(sender) {
    axios.delete(`/account/ignore-friend-request/${sender}`).then(() => {
      $(`#friendRequestFrom${sender}`).remove();
      if ($(`#receivedRequestFrom${sender}`).length) {
        $(`#receivedRequestFrom${sender}`).css('display', 'none')
        $(`#addFriendButtonFor${sender}`).css('display', 'block')
      }
      socket.emit('ignore friend request', sender);
    });
  }

  $(document).ready(function() {

    axios.get('/account/number-unseen-friend-request').then((res) => {
      const numOfUnseenRequests = res.data.numOfUnseenRequests;
      // console.log(numOfUnseenRequests);
      if (numOfUnseenRequests > 0) {
        $('#friendsNotiBadge').text(numOfUnseenRequests);
        $('#friendsNotiBadge').show();
      }
    })

    function loadRequests(requests, statusOfRequests) {
      requests.forEach((request) => {
        $('#friendsRequestNotiMenu').append(
            `
            <div id="friendRequestFrom${request.sender}" class="container-fluid ${statusOfRequests}">
              <div class="row align-items-center">
                <div class="col text-left">
                  <img src="${request.senderAvatarURL}" style="border-radius: 50%" width="40" height="40"> 
                  <span style="font-size: 14px">
                    <strong class="brandColor">${request.sender}</strong>
                  </span>
                </div>
                <div class="col text-right" style=" vertical-align: middle">
                  <button onclick="acceptRequestFrom('${request.sender}')" class="btn btn-success" style="font-size: 12px; height: 0.75cm;">Accept</button>
                  <button onclick="ignoreRequestFrom('${request.sender}')" class="btn btn-outline-danger" style="font-size: 12px; height: 0.75cm;">Ignore</button>
                </div>
              </div>
              <div class="dropdown-divider"></div>
            </div>
            `
          )
      })
    }

    axios.get('/account/unseen-friend-request').then((res1) => {
      const unseenRequests = res1.data.unseenRequests;
      // console.log(unseenRequests);
      loadRequests(unseenRequests, 'unseenRequests')
    }).then(() => {

      axios.get('/account/seen-friend-request').then((res2) => {
        const seenRequests = res2.data.seenRequests;
        // console.log(seenRequests);
        loadRequests(seenRequests, 'seenRequests')
      })
    })

    $('#friendsDropdownMenu').click(function(e){
      e.stopPropagation();
    })

    $('#friendsDropdown').click(function(e) {
      $('#friendsNotiBadge').hide();
      $('#friendsNotiBadge').text(0);
      axios.patch('/account/update-unseen-friend-request');
    })

    // Chat 

    function resetScrollTopToTheEnd() {
      const scrollHeight = $(`#chatBox1Inboxes`)[0].scrollHeight;
      $(`#chatBox1Inboxes`).scrollTop(scrollHeight)
    }

    resetScrollTopToTheEnd();

    function loadMessages(messages, receiver) {
      
      for (let i = 0; i < messages.length; i++) {
        if (messages[i].sender == receiver) {
          $('#chatBox1Spinner').after(
            `
            <div id="message_${messages[i].sentTime}" class="d-flex flex-row">
              <div class="text-left receiverMessage">
                ${messages[i].messageContent}
              </div>
            </div>
            `
          )
        } else {
          $('#chatBox1Spinner').after(
            `
            <div id="message_${messages[i].sentTime}" class="d-flex flex-row-reverse">
              <div class="text-right senderMessage">
                ${messages[i].messageContent}
              </div>
            </div>
            `
          )
        }
      }

      if (messages.length < 10) {
        $('#chatBox1FirstMessage').show();
      }
    }

    function openChatBox(receiver, receiverAvatarURL) {
      $('#chatBox1HeaderToggle h6').text(receiver);
      $('#chatBox1Receiver h6').text(receiver);

      $('#chatBox1HeaderToggle img').attr('src', receiverAvatarURL);
      $('#chatBox1Receiver img').attr('src', receiverAvatarURL);

      $('#chatBox1FirstMessage').hide();
      $('#chatBox1FirstMessage').children().eq(1).text(`You and ${receiver} are friends on Achilles`)

      $('#chatBox1Spinner').nextAll().remove()

      axios.get(`/chat/get-initial-messages/${receiver}`).then((res) => {
        const messages = res.data.messages;
        loadMessages(messages, receiver);
      }).then(() => {
        $('#chatBox1Toggle').show();
        $('#chatBox1HeaderToggle').show();
        resetScrollTopToTheEnd();
      })      
    }

    $('.chatTrigger').click(function() {
      const receiver = $(this).attr('id').replace('chatTriggerFor', '');
      const receiverAvatarURL = $(`#avatarOf${receiver}`).attr('src');
      // alert(receiverAvatarURL)
      // alert(receiver);
      
      openChatBox(receiver, receiverAvatarURL);
    });


    $('#friendsChatToggle .card-header').click(function() {
      $('#friendsChatToggle').hide();
    })

    $('#friendsChatHeaderToggle .card-header').click(function() {
      $('#friendsChatToggle').show();
    })

    $('#chatBox1Toggle .card-header').click(function() {
      $('#chatBox1Toggle').hide();
    })

    $('#chatBox1HeaderToggle .card-header').click(function() {
      $('#chatBox1Toggle').show();
    })

    $('#chatBox1Toggle .fa-times').click(function() {
      $('#chatBox1Toggle').hide();
      $('#chatBox1HeaderToggle').hide();
    })
    
    $('#chatBox1TextArea').on('change keyup paste', function() {
      const val = $('#chatBox1TextArea').val();
      const numOfRows = $('#chatBox1TextArea').val().split("\n").length;
      if (numOfRows >= 2 && $('#chatBox1TextArea').hasClass('h-10p')) {
        $('#chatBox1TextArea').css('height', '20%');
        $('#chatBox1TextArea').removeClass('h-10p').addClass('h-20p');
        $('#chatBox1InboxContainer').css('height', '80%')

        resetScrollTopToTheEnd();
        return;
      }

      if (numOfRows < 2) {
        if (val.length > 36 && $('#chatBox1TextArea').hasClass('h-10p')) {
          $('#chatBox1TextArea').css('height', '20%');
          $('#chatBox1TextArea').removeClass('h-10p').addClass('h-20p')
          $('#chatBox1InboxContainer').css('height', '80%')
        } 

        if (val.length <= 36 && $('#chatBox1TextArea').hasClass('h-20p')) {
          $('#chatBox1TextArea').css('height', '10%');
          $('#chatBox1TextArea').removeClass('h-20p').addClass('h-10p')
          $('#chatBox1InboxContainer').css('height', '90%')
        }
      }

      resetScrollTopToTheEnd();
      
    })

    $(`#chatBox1Inboxes`).scroll(function() {
      if ($('#chatBox1FirstMessage').css('display') == 'none') {
        if ($(`#chatBox1Inboxes`).scrollTop() == 0) {
          $('#chatBox1Spinner').removeClass('d-none').addClass('d-flex');
          setTimeout( function() {
            $('#chatBox1Spinner').removeClass('d-flex').addClass('d-none');
            const currentMessage = document.getElementById('chatBox1Spinner').nextElementSibling
            const currentMessageHeight = currentMessage.offsetHeight
            const afterTime = currentMessage.id.replace('message_', '')
            const receiver = $('#chatBox1Receiver h6').text().trim();

            let totalAddedHeight = 0;

            axios.get(`/chat/get-messages-after/${receiver}?afterTime=${afterTime}`).then((res) => {
              const messages = res.data.messages;
              loadMessages(messages, receiver);
              totalAddedHeight += messages.length * currentMessageHeight;
              $(`#chatBox1Inboxes`).scrollTop(totalAddedHeight);
            })
            
          }, 3000)
        }
      }
      
    })

    $('#chatBox1TextArea').on('keypress', function(e) {
      if (e.which == 13 && !e.shiftKey) {
        e.preventDefault();
        const receiver = $('#chatBox1Receiver').text().trim();
        const messageContent = $('#chatBox1TextArea').val();

        if (messageContent != '' && messageContent.trim() != '') {
          $('#chatBox1Inboxes').append(
            `
            <div class="d-flex flex-row-reverse">
              <div class="text-right senderMessage">
                ${messageContent}
              </div>
            </div>
            `
          )
          resetScrollTopToTheEnd();
          $('#chatBox1TextArea').val('')
  
          axios.post('/chat/send-message', {
            receiver,
            messageContent
          }).then(() => {
            socket.emit('sent message', receiver, messageContent);
          })
        }    
      }
    })

    function playSound() {
      let chatSound = document.getElementById('chatSound');
      console.log(chatSound);
      chatSound.play()
      // .then(_ => {
      // }).catch( err => {
      // })
    }

    playSound();

    function addMessageToast(sender, senderAvatarURL, messageContent) {
      const time = Date.now();
      $('#toastsNoti').append(

        `<div id="${time}" class="toast ml-auto" role="alert" data-delay="3000" data-autohide="true">
            <div class="toast-header">
                <strong class="mr-auto text-primary">Message</strong>
                <small class="text-muted">just now</small>
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="toast-body">
                <img src="${senderAvatarURL}" style="border-radius: 50%" width="30" height="30"> 
                <span style="font-size: 14px">
                  <strong class="brandColor">${sender}</strong>
                  sent you a message: "${messageContent}"
                </span>
            </div>
        </div>
        `
      )
      $(`#${time}`).toast('show')
    }
    
  socket.on('received message', function (senderFromSocket, messageContent) {
    // alert('received message from ' + sender);
    const senderFromSocketAvaURL = $(`#avatarOf${senderFromSocket}`).attr('src');

    const receiverFromChatBox = $('#chatBox1Receiver').text().trim();

    if (senderFromSocket == receiverFromChatBox
    && $('#chatBox1HeaderToggle').is(':visible')
    && $('#chatBox1Toggle').is(':visible')) {
      $('#chatBox1Inboxes').append(
        `
        <div class="d-flex flex-row">
          <div class="text-left receiverMessage">
            ${messageContent}
          </div>
        </div>
        `
      )
      resetScrollTopToTheEnd();
    } else {
      if ($('#chatBox1HeaderToggle').is(':hidden')
      && $('#chatBox1Toggle').is(':hidden')) {
        const receiver = senderFromSocket;
        const receiverAvatarURL = senderFromSocketAvaURL;

        openChatBox(receiver, receiverAvatarURL);
        
      }
    }

    playSound();
    addMessageToast(senderFromSocket, senderFromSocketAvaURL, messageContent);

  })
})
</script>